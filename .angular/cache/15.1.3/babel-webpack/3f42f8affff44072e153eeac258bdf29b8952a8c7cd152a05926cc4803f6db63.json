{"ast":null,"code":"import { HttpParams, HttpStatusCode } from '@angular/common/http';\nimport { retry, catchError, map } from 'rxjs/operators';\nimport { throwError, zip } from 'rxjs';\nimport { checkTime } from './../interceptors/time.interceptor';\nimport { environment } from './../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProductsService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.API_URL}/api`;\n  }\n  getByCategory(categoryId, limit, offset) {\n    let params = new HttpParams();\n    if (limit && offset !== undefined) {\n      params = params.set('limit', limit);\n      params = params.set('offset', offset);\n    }\n    return this.http.get(`${this.apiUrl}/categories/${categoryId}/products`, {\n      params\n    });\n  }\n  getAll(limit, offset) {\n    let params = new HttpParams();\n    if (limit && typeof offset === 'number') {\n      params = params.set('limit', limit);\n      params = params.set('offset', offset);\n    }\n    return this.http.get(`${this.apiUrl}/products`, {\n      params,\n      context: checkTime()\n    }).pipe(retry(3), map(products => products.map(item => {\n      return Object.assign(Object.assign({}, item), {\n        taxes: .19 * item.price\n      });\n    })));\n  }\n  fetchReadAndUpdate(id, dto) {\n    return zip(this.getOne(id), this.update(id, dto));\n  }\n  getOne(id) {\n    return this.http.get(`${`${this.apiUrl}/products`}/${id}`).pipe(catchError(error => {\n      if (error.status === 409 /* HttpStatusCode.Conflict */) {\n        return throwError('Algo esta fallando en el server');\n      }\n      if (error.status === 404 /* HttpStatusCode.NotFound */) {\n        return throwError('El producto no existe');\n      }\n      if (error.status === 401 /* HttpStatusCode.Unauthorized */) {\n        return throwError('No estas permitido');\n      }\n      return throwError('Ups algo salio mal');\n    }));\n  }\n  create(dto) {\n    return this.http.post(`${this.apiUrl}/products`, dto);\n  }\n  update(id, dto) {\n    return this.http.put(`${`${this.apiUrl}/products`}/${id}`, dto);\n  }\n  delete(id) {\n    return this.http.delete(`${`${this.apiUrl}/products`}/${id}`);\n  }\n}\nProductsService.ɵfac = function ProductsService_Factory(t) {\n  return new (t || ProductsService)(i0.ɵɵinject(i1.HttpClient));\n};\nProductsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProductsService,\n  factory: ProductsService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpParams","HttpStatusCode","retry","catchError","map","throwError","zip","checkTime","environment","ProductsService","constructor","http","API_URL","getByCategory","categoryId","limit","offset","params","undefined","set","get","apiUrl","getAll","context","pipe","products","item","taxes","price","fetchReadAndUpdate","id","dto","getOne","update","error","status","create","post","put","delete","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Flavio\\Desktop\\ANGULAR\\angular-router\\src\\app\\services\\products.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams, HttpErrorResponse, HttpStatusCode } from '@angular/common/http';\r\nimport { retry, catchError, map } from 'rxjs/operators';\r\nimport { throwError, zip } from 'rxjs';\r\n\r\nimport { Product, CreateProductDTO, UpdateProductDTO } from './../models/product.model';\r\nimport { checkTime } from './../interceptors/time.interceptor';\r\nimport { environment } from './../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProductsService {\r\n\r\n  private apiUrl = `${environment.API_URL}/api`;\r\n\r\n  constructor(\r\n    private http: HttpClient\r\n  ) { }\r\n\r\n  getByCategory(categoryId: string, limit?: number, offset?: number) {\r\n    let params = new HttpParams();\r\n    if (limit && offset !== undefined) {\r\n      params = params.set('limit', limit);\r\n      params = params.set('offset', offset);\r\n    }\r\n    return this.http.get<Product[]>(`${this.apiUrl}/categories/${categoryId}/products`, { params });\r\n  }\r\n\r\n  getAll(limit?: number, offset?: number) {\r\n    let params = new HttpParams();\r\n    if (limit && (typeof offset === 'number')) {\r\n      params = params.set('limit', limit);\r\n      params = params.set('offset', offset);\r\n    }\r\n    return this.http.get<Product[]>(`${this.apiUrl}/products`, { params, context: checkTime() })\r\n    .pipe(\r\n      retry(3),\r\n      map(products => products.map(item => {\r\n        return {\r\n          ...item,\r\n          taxes: .19 * item.price\r\n        }\r\n      }))\r\n    );\r\n  }\r\n\r\n  fetchReadAndUpdate(id: string, dto: UpdateProductDTO) {\r\n    return zip(\r\n      this.getOne(id),\r\n      this.update(id, dto)\r\n    );\r\n  }\r\n\r\n  getOne(id: string) {\r\n    return this.http.get<Product>(`${`${this.apiUrl}/products`}/${id}`)\r\n    .pipe(\r\n      catchError((error: HttpErrorResponse) => {\r\n        if (error.status === HttpStatusCode.Conflict) {\r\n          return throwError('Algo esta fallando en el server');\r\n        }\r\n        if (error.status === HttpStatusCode.NotFound) {\r\n          return throwError('El producto no existe');\r\n        }\r\n        if (error.status === HttpStatusCode.Unauthorized) {\r\n          return throwError('No estas permitido');\r\n        }\r\n        return throwError('Ups algo salio mal');\r\n      })\r\n    )\r\n  }\r\n\r\n  create(dto: CreateProductDTO) {\r\n    return this.http.post<Product>(`${this.apiUrl}/products`, dto);\r\n  }\r\n\r\n  update(id: string, dto: UpdateProductDTO) {\r\n    return this.http.put<Product>(`${`${this.apiUrl}/products`}/${id}`, dto);\r\n  }\r\n\r\n  delete(id: string) {\r\n    return this.http.delete<boolean>(`${`${this.apiUrl}/products`}/${id}`);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}